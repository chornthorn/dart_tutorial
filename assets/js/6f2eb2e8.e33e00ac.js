"use strict";(self.webpackChunksimple_dart_docs=self.webpackChunksimple_dart_docs||[]).push([[489],{3905:function(t,e,a){a.d(e,{Zo:function(){return s},kt:function(){return c}});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),d=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=d(t.components);return r.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),u=d(a),c=n,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return a?r.createElement(k,i(i({ref:e},s),{},{components:a})):r.createElement(k,i({ref:e},s))}));function c(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9049:function(t,e,a){a.r(e),a.d(e,{assets:function(){return s},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),i=["components"],o={sidebar_position:7,title:"Operators in Dart",description:"Learn about the operators in Dart"},p=void 0,d={unversionedId:"introduction/operators",id:"introduction/operators",title:"Operators in Dart",description:"Learn about the operators in Dart",source:"@site/docs/introduction/operators.md",sourceDirName:"introduction",slug:"/introduction/operators",permalink:"/dart_tutorial/docs/introduction/operators",draft:!1,editUrl:"https://github.com/chornthorn/dart_tutorial/tree/main/docs/docs/introduction/operators.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Operators in Dart",description:"Learn about the operators in Dart"},sidebar:"docs",previous:{title:"Comments in Dart",permalink:"/dart_tutorial/docs/introduction/comments"},next:{title:"User Input & Output in Dart",permalink:"/dart_tutorial/docs/introduction/user-input"}},s={},m=[{value:"Types Of Operators",id:"types-of-operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Increment and Decrement Operators",id:"increment-and-decrement-operators",level:2},{value:"Assignment Operators",id:"assignment-operators",level:2},{value:"Relational Operators",id:"relational-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Type Test Operators",id:"type-test-operators",level:2}],u={toc:m};function c(t){var e=t.components,a=(0,n.Z)(t,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Operators are used to perform mathematical and logical operations on the variables. Each operation in dart uses a symbol\ncalled the operator to denote the type of operation it performs. Before learning operators in the dart, you must\nunderstand the following things."),(0,l.kt)("p",null,"Operands : It represents the data.\nOperator It represents how the operands will be processed to produce a value."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Suppose the given expression is 2 + 3. Here 2 and 3 are operands, and + is the operator."))),(0,l.kt)("h2",{id:"types-of-operators"},"Types Of Operators"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Arithmetic Operators"),(0,l.kt)("li",{parentName:"ul"},"Increment and Decrement Operators"),(0,l.kt)("li",{parentName:"ul"},"Assignment Operators"),(0,l.kt)("li",{parentName:"ul"},"Logical Operators"),(0,l.kt)("li",{parentName:"ul"},"Type Test Operators")),(0,l.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,l.kt)("p",null,"Arithmetic operators are the most common types of operators. They perform operations like addition, subtraction,\nmultiplication, division, etc."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Symbol"),(0,l.kt)("th",{parentName:"tr",align:null},"Operation Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"+"),(0,l.kt)("td",{parentName:"tr",align:null},"Addition"),(0,l.kt)("td",{parentName:"tr",align:null},"For adding two operands")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Subtraction"),(0,l.kt)("td",{parentName:"tr",align:null},"For subtracting two operands")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-expr"),(0,l.kt)("td",{parentName:"tr",align:null},"Unary"),(0,l.kt)("td",{parentName:"tr",align:null},"Minus For reversing the sign of the expression")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Multiplication"),(0,l.kt)("td",{parentName:"tr",align:null},"For multiplying two operands")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"/"),(0,l.kt)("td",{parentName:"tr",align:null},"Division"),(0,l.kt)("td",{parentName:"tr",align:null},"For dividing two operands and give output in double")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"~/"),(0,l.kt)("td",{parentName:"tr",align:null},"Division"),(0,l.kt)("td",{parentName:"tr",align:null},"For dividing two operands and give output in integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"%"),(0,l.kt)("td",{parentName:"tr",align:null},"Modulus"),(0,l.kt)("td",{parentName:"tr",align:null},"Remainder After Integer Division")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"++"),(0,l.kt)("td",{parentName:"tr",align:null},"Increment"),(0,l.kt)("td",{parentName:"tr",align:null},"Increase Value By 1. For E.g a++;")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrement"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrease Value By 1. For E.g a\u2013;")))),(0,l.kt)("p",null,"Let\u2019s look at how to perform arithmetic calculations in dart."),(0,l.kt)("iframe",{src:"//dartpad.dev/embed-inline.html?id=44d196363f3a46961bb4e604cc25987f&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%",height:"700"}),(0,l.kt)("h2",{id:"increment-and-decrement-operators"},"Increment and Decrement Operators"),(0,l.kt)("p",null,"With increment and decrement operators, you can increase and decrease values. If ",(0,l.kt)("inlineCode",{parentName:"p"},"++")," is used at the beginning, then it\nis a prefix. If it is used at last, then it is postfix."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Symbol"),(0,l.kt)("th",{parentName:"tr",align:null},"Operation Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"++var"),(0,l.kt)("td",{parentName:"tr",align:null},"Pre Increment"),(0,l.kt)("td",{parentName:"tr",align:null},"Increase Value By 1. var = var + 1 Expression value is var+1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--var"),(0,l.kt)("td",{parentName:"tr",align:null},"Pre Decrement"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrease Value By 1. var = var - 1 Expression value is var-1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"var++"),(0,l.kt)("td",{parentName:"tr",align:null},"Post Increment"),(0,l.kt)("td",{parentName:"tr",align:null},"Increase Value By 1. var = var + 1 Expression value is var")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"var--"),(0,l.kt)("td",{parentName:"tr",align:null},"Post Decrement"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrease Value By 1. var = var - 1 Expression value is var")))),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"++var")," increases the value of operands, whereas ",(0,l.kt)("strong",{parentName:"p"},"var++")," return the actual value of operands before the increment."))),(0,l.kt)("iframe",{height:"600",src:"//dartpad.dev/embed-inline.html?id=857e3d55344fe4b4f6f9976bb38282e5&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%"}),(0,l.kt)("h2",{id:"assignment-operators"},"Assignment Operators"),(0,l.kt)("p",null,"It is used to assign some values to variables. Here, we are assigning 24 to the age variable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"\nint age = 24;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"="),(0,l.kt)("td",{parentName:"tr",align:null},"Assign a value to a variable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"+="),(0,l.kt)("td",{parentName:"tr",align:null},"Adds a value to a variable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-="),(0,l.kt)("td",{parentName:"tr",align:null},"Reduces a value to a variable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"*","="),(0,l.kt)("td",{parentName:"tr",align:null},"Multiply value to a variable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"/="),(0,l.kt)("td",{parentName:"tr",align:null},"Divided value by a variable")))),(0,l.kt)("iframe",{height:"400",src:"//dartpad.dev/embed-inline.html?id=d8042da3945428b8ab28e34bdfb8e4ee&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%"}),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To assign only if the assign-to variable is null use ",(0,l.kt)("inlineCode",{parentName:"p"},"??")," operator."))),(0,l.kt)("h2",{id:"relational-operators"},"Relational Operators"),(0,l.kt)("p",null,"Relational operators are also called comparison operators. They are used to make a comparison."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Symbol"),(0,l.kt)("th",{parentName:"tr",align:null},"Operation Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"}," >")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check which operand is bigger and gives result as boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"<"),(0,l.kt)("td",{parentName:"tr",align:null},"Less than"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check which operand is smaller and gives result as boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">=")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check which operand is bigger or equal and gives result as boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"<="),(0,l.kt)("td",{parentName:"tr",align:null},"Less than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check which operand is smaller or equal and gives result as boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"=="),(0,l.kt)("td",{parentName:"tr",align:null},"Equal to"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check operands are equal to each other and gives result as boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"!="),(0,l.kt)("td",{parentName:"tr",align:null},"Not equal to"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to check operand are not equal to each other and gives result as boolean")))),(0,l.kt)("iframe",{height:"400",src:"//dartpad.dev/embed-inline.html?id=bd03369257fb7b845e76cae55665f4b7&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%"}),(0,l.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,l.kt)("p",null,"It is used to compare values."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"&&"),(0,l.kt)("td",{parentName:"tr",align:null},"This is \u2018and\u2019, return true if all conditions are true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2 equal"),(0,l.kt)("td",{parentName:"tr",align:null},"This is \u2018or\u2019. Return true if one of the conditions is true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"!"),(0,l.kt)("td",{parentName:"tr",align:null},"This is \u2019not\u2019. return false if the result is true and vice versa")))),(0,l.kt)("iframe",{height:"400",src:"//dartpad.dev/embed-inline.html?id=5df7cc0c67102c9feed2ab6923523cc0&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%"}),(0,l.kt)("h2",{id:"type-test-operators"},"Type Test Operators"),(0,l.kt)("p",null,"In dart, ",(0,l.kt)("strong",{parentName:"p"},"type test")," operators are useful for checking types at runtime."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator Symbol"),(0,l.kt)("th",{parentName:"tr",align:null},"Operation Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"is"),(0,l.kt)("td",{parentName:"tr",align:null},"Gives boolean value true if the object has a specific type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is!"),(0,l.kt)("td",{parentName:"tr",align:null},"is not"),(0,l.kt)("td",{parentName:"tr",align:null},"Gives boolean value false if the object has a specific type")))),(0,l.kt)("iframe",{height:"300",src:"//dartpad.dev/embed-inline.html?id=3488d68321ecf30c9065bf39a4c481ed&split=70&theme=dark",frameborder:"0",allowfullscreen:!0,width:"100%"}))}c.isMDXComponent=!0}}]);